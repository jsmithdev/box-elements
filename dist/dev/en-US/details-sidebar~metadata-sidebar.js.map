{"version":3,"sources":["webpack:///./src/components/collapsible/Collapsible.scss","webpack:///./src/components/collapsible/Collapsible.tsx","webpack:///./src/components/text-input/TextInput.js","webpack:///./src/components/text-input/TextInput.scss","webpack:///./src/icons/general/IconAlertDefault.tsx"],"names":["Collapsible","React","constructor","props","onOpen","onClose","setState","prevState","isOpen","state","render","animationDuration","buttonProps","children","className","isBordered","hasStickyHeader","headerActionItems","title","sectionClassName","classNames","resinTagTarget","RESIN_TAG_TARGET","modifiedButtonProps","omit","interactionTarget","buttonClassName","toggleVisibility","ButtonType","BUTTON","bdlGray50","TextInput","description","error","errorPosition","hideLabel","hideOptionalLabel","icon","inputRef","isLoading","isRequired","isValid","label","labelTooltip","tooltipTetherClassName","rest","hasError","classes","descriptionID","uniqueId","current","ariaAttrs","undefined","displayName","IconAlertDefault","color","height","width"],"mappings":"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","file":"details-sidebar~metadata-sidebar.js","sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport AnimateHeight from 'react-animate-height';\n\n// @ts-ignore flow import\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport IconCaretDown from '../../icons/general/IconCaretDown';\nimport PlainButton from '../plain-button';\nimport { ButtonType } from '../button';\nimport { bdlGray50 } from '../../styles/variables';\n\nimport './Collapsible.scss';\n\nexport interface CollapsibleProps {\n    /** animationDuration - duration of animation in milliseconds */\n    animationDuration?: number;\n    /** buttonProps - other props (e.g. resin target names) to be included in the button */\n    buttonProps?: Record<string, React.ReactNode>;\n    /** children - content to be displayed in the card when it is expanded */\n    children: Array<React.ReactChild> | React.ReactChild;\n    /** className - CSS class for the wrapper div */\n    className?: string;\n    /** hasStickyHeader - determines look of component */\n    hasStickyHeader?: boolean;\n    /** headerActionItems - determines stickiness of the header */\n    headerActionItems?: React.ReactChild;\n    /** headerButton - button in the title of the collapsible card */\n    headerButton?: React.ReactElement;\n    /** isBordered - determines optional header action items */\n    isBordered?: boolean;\n    /** isOpen - initial state of the collapsible card */\n    isOpen: boolean;\n    /** onClose - callback called when collapsible is opened */\n    onClose?: Function;\n    /** onOpen - callback called when collapsible is collapsed */\n    onOpen?: Function;\n    /** title - string or component in the title of the collapsible card */\n    title: string | React.ReactElement;\n}\n\ninterface CollapsibleState {\n    /** isOpen - initial state of the collapsible card */\n    isOpen: boolean;\n}\n\nclass Collapsible extends React.PureComponent<CollapsibleProps, CollapsibleState> {\n    static defaultProps = {\n        buttonProps: {},\n        className: '',\n        isOpen: true,\n        animationDuration: 100,\n    };\n\n    constructor(props: CollapsibleProps) {\n        super(props);\n        this.state = {\n            isOpen: props.isOpen,\n        };\n    }\n\n    toggleVisibility = () => {\n        const { onOpen, onClose } = this.props;\n        this.setState(\n            prevState => ({\n                isOpen: !prevState.isOpen,\n            }),\n            () => {\n                const { isOpen } = this.state;\n                if (isOpen && onOpen) {\n                    onOpen(this);\n                } else if (!isOpen && onClose) {\n                    onClose(this);\n                }\n            },\n        );\n    };\n\n    render() {\n        const { isOpen }: CollapsibleState = this.state;\n        const {\n            animationDuration,\n            buttonProps = {},\n            children,\n            className,\n            isBordered,\n            hasStickyHeader,\n            headerActionItems,\n            title,\n        }: CollapsibleProps = this.props;\n\n        const sectionClassName = classNames(\n            'collapsible-card',\n            {\n                'is-open': isOpen,\n            },\n            {\n                'is-bordered': isBordered,\n            },\n            className,\n        );\n        const resinTagTarget: string = RESIN_TAG_TARGET;\n        const modifiedButtonProps: { [index: string]: string } = omit(buttonProps, [resinTagTarget]);\n        const interactionTarget = buttonProps[resinTagTarget];\n        const buttonClassName = hasStickyHeader\n            ? 'collapsible-card-header has-sticky-header'\n            : 'collapsible-card-header';\n\n        if (interactionTarget) {\n            modifiedButtonProps[resinTagTarget] = `${interactionTarget}${isOpen ? 'collapse' : 'expand'}`;\n        }\n\n        return (\n            <div className={sectionClassName}>\n                <div className={buttonClassName}>\n                    <PlainButton\n                        {...modifiedButtonProps}\n                        aria-expanded={isOpen}\n                        className=\"collapsible-card-title\"\n                        onClick={this.toggleVisibility}\n                        type={ButtonType.BUTTON}\n                    >\n                        {title}\n                        <IconCaretDown className=\"collapsible-card-header-caret\" color={bdlGray50} width={8} />\n                    </PlainButton>\n                    {!!headerActionItems && <span className=\"bdl-Collapsible-actionItems\">{headerActionItems}</span>}\n                </div>\n                <AnimateHeight duration={animationDuration} height={isOpen ? 'auto' : 0}>\n                    <div className=\"collapsible-card-content\">{children}</div>\n                </AnimateHeight>\n            </div>\n        );\n    }\n}\n\nexport default Collapsible;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport IconVerified from '../../icons/general/IconVerified';\n\nimport Label from '../label';\nimport LoadingIndicator from '../loading-indicator';\nimport Tooltip from '../tooltip';\nimport type { Position } from '../tooltip';\n\nimport './TextInput.scss';\n\ntype Props = {\n    /** Add a class to the component */\n    className?: string,\n    description?: React.Node,\n    error?: React.Node,\n    /** Renders error tooltip at the specified position (positions are those from Tooltip) */\n    errorPosition?: Position,\n    /** Hides the label */\n    hideLabel?: boolean,\n    /** Hides (optional) text from the label */\n    hideOptionalLabel?: boolean,\n    /** Icon to display in the input field */\n    icon?: React.Node,\n    inputRef?: Function, // @TODO: eventually rename to innerRef for consistancy across all form elements\n    /** Renders a loading indicator within the component when true */\n    isLoading?: boolean,\n    /** Makes the input value required */\n    isRequired?: boolean,\n    /** Renders a green verified checkmark within the component when true */\n    isValid?: boolean,\n    /** Label displayed for the text input */\n    label: React.Node,\n    labelTooltip?: React.Node,\n    /** A CSS class for the tooltip's tether element component */\n    tooltipTetherClassName?: string,\n};\n\nconst TextInput = ({\n    className = '',\n    description,\n    error,\n    errorPosition,\n    hideLabel,\n    hideOptionalLabel,\n    icon,\n    inputRef,\n    isLoading,\n    isRequired,\n    isValid,\n    label,\n    labelTooltip,\n    tooltipTetherClassName,\n    ...rest\n}: Props) => {\n    const hasError = !!error;\n    const classes = classNames(className, 'text-input-container', {\n        'show-error': hasError,\n    });\n\n    const descriptionID = React.useRef(uniqueId('description')).current;\n\n    const ariaAttrs = {\n        'aria-invalid': hasError,\n        'aria-required': isRequired,\n        'aria-describedby': description ? descriptionID : undefined,\n    };\n\n    return (\n        <div className={classes}>\n            <Label\n                hideLabel={hideLabel}\n                showOptionalText={!hideOptionalLabel && !isRequired}\n                text={label}\n                tooltip={labelTooltip}\n            >\n                {!!description && (\n                    <div id={descriptionID} className=\"text-input-description\">\n                        {description}\n                    </div>\n                )}\n                <Tooltip\n                    isShown={hasError}\n                    position={errorPosition || 'middle-right'}\n                    tetherElementClassName={tooltipTetherClassName}\n                    text={error || ''}\n                    theme=\"error\"\n                >\n                    <input ref={inputRef} required={isRequired} {...ariaAttrs} {...rest} />\n                </Tooltip>\n                {isLoading && !isValid && <LoadingIndicator className=\"text-input-loading\" />}\n                {isValid && !isLoading && <IconVerified className=\"text-input-verified\" />}\n                {!isLoading && !isValid && icon ? icon : null}\n            </Label>\n        </div>\n    );\n};\n\nTextInput.displayName = 'TextInput';\n\nexport type TextInputProps = Props;\nexport default TextInput;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\nimport { Icon } from '../iconTypes';\n\nconst IconAlertDefault = ({ className = '', color = '#F7931D', height = 26, title, width = 26 }: Icon) => (\n    <AccessibleSVG\n        className={`icon-alert-default ${className}`}\n        title={title}\n        height={height}\n        width={width}\n        viewBox=\"0 0 26 26\"\n    >\n        <defs>\n            <circle id=\"b\" cx=\"8\" cy=\"8\" r=\"8\" />\n            <filter x=\"-46.9%\" y=\"-46.9%\" width=\"193.8%\" height=\"193.8%\" filterUnits=\"objectBoundingBox\" id=\"a\">\n                <feMorphology radius=\".5\" operator=\"dilate\" in=\"SourceAlpha\" result=\"shadowSpreadOuter1\" />\n                <feOffset in=\"shadowSpreadOuter1\" result=\"shadowOffsetOuter1\" />\n                <feGaussianBlur stdDeviation=\"2\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n                <feColorMatrix\n                    values=\"0 0 0 0 0.733285502 0 0 0 0 0.733285502 0 0 0 0 0.733285502 0 0 0 0.5 0\"\n                    in=\"shadowBlurOuter1\"\n                />\n            </filter>\n        </defs>\n        <g transform=\"translate(5 5)\" fill=\"none\" fillRule=\"evenodd\">\n            <use fill=\"#000\" filter=\"url(#a)\" xlinkHref=\"#b\" />\n            <use fill={color} xlinkHref=\"#b\" />\n            <path\n                d=\"M8.047 4.706v4.111\"\n                stroke=\"#FFF\"\n                strokeWidth=\"1.412\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <circle fill=\"#FFF\" cx=\"8.047\" cy=\"11.294\" r=\"1\" />\n        </g>\n    </AccessibleSVG>\n);\n\nexport default IconAlertDefault;\n"],"sourceRoot":""}