{"version":3,"sources":["webpack:///./src/components/modal/Modal.js","webpack:///./src/components/modal/Modal.scss","webpack:///./src/components/modal/ModalActions.js","webpack:///./src/components/modal/ModalDialog.js","webpack:///./src/components/portal/Portal.tsx","webpack:///./src/components/portal/index.tsx","webpack:///./src/elements/content-sidebar/withErrorHandling.js"],"names":["Modal","React","event","isOpen","onRequestClose","props","key","stopPropagation","onBackdropClick","setTimeout","focusElementSelector","focusElementSelectorTrimmed","trim","focusElement","focusFirstUsefulElement","dialog","tabbableEls","tabbable","length","focus","elementSelector","el","querySelector","Error","componentDidMount","onModalOpen","componentDidUpdate","prevProps","isLoading","render","className","shouldNotUsePortal","style","rest","bodyOverrideStyle","modalProps","omit","WrapperComponent","Portal","classNames","onKeyDown","backdrop","modalEl","ModalActions","ALERT_TYPE","DIALOG_TYPE","messages","defineMessages","closeModalText","ModalDialog","uniqueId","renderCloseButton","closeButtonProps","intl","formatMessage","onCloseButtonClick","renderContent","children","type","elements","toArray","modalID","modalRef","title","isAlertType","divProps","role","injectIntl","constructor","container","layer","document","createElement","setAttribute","appendChild","componentWillUnmount","removeChild","elementProps","createPortal","body","withErrorHandling","WrappedComponent","maskError","inlineError","errorCode","errorHeader","errorSubHeader","undefined","content"],"mappings":"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","file":"activity-sidebar~details-sidebar.js","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport tabbable from 'tabbable';\nimport omit from 'lodash/omit';\n\nimport FocusTrap from '../focus-trap';\nimport LoadingIndicator from '../loading-indicator';\nimport Portal from '../portal';\nimport ModalDialog from './ModalDialog';\n\nimport './Modal.scss';\n\ntype Props = {\n    children: React.Node,\n    /** Additional CSS classname of the `.modal` element */\n    className?: string,\n    focusElementSelector?: string,\n    isLoading?: boolean,\n    isOpen?: boolean,\n    onBackdropClick?: Function,\n    /** `(event) => {}`. `event` can be of type `SyntheticKeyboardEvent|SyntheticMouseEvent`. */\n    onRequestClose?: Function,\n    /** modal usually use Portal as Portal stays if parent is removed, but it cannot retain DOM tree's resin props */\n    shouldNotUsePortal?: boolean,\n    style: {\n        backdrop?: Object,\n        dialog?: Object,\n    },\n    title?: React.Node,\n};\n\nclass Modal extends React.Component<Props> {\n    static defaultProps = {\n        style: {\n            backdrop: {},\n            dialog: {},\n        },\n    };\n\n    componentDidMount() {\n        const { isOpen } = this.props;\n\n        if (isOpen) {\n            this.onModalOpen();\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const { isLoading, isOpen } = this.props;\n\n        // Set focus if modal is transitioning from closed -> open and/or loading -> not loading\n        if ((!prevProps.isOpen || prevProps.isLoading) && isOpen && !isLoading) {\n            this.onModalOpen();\n        }\n    }\n\n    /**\n     * Call props.onRequestClose when escape is pressed\n     * @param {SyntheticKeyboardEvent} event\n     */\n    onKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const { isOpen, onRequestClose } = this.props;\n        if (isOpen && onRequestClose && event.key === 'Escape') {\n            event.stopPropagation();\n            onRequestClose(event);\n        }\n    };\n\n    /**\n     * Call props.onRequestClose when backdrop is clicked\n     * @param {SyntheticMouseEvent} event\n     */\n    onBackdropClick = (event: SyntheticMouseEvent<HTMLDivElement>) => {\n        const { onRequestClose, onBackdropClick } = this.props;\n\n        if (onBackdropClick) {\n            onBackdropClick(event);\n        } else if (onRequestClose) {\n            onRequestClose(event);\n        }\n    };\n\n    /**\n     * Focuses on the correct element in the popup when it opens\n     */\n    onModalOpen = () => {\n        setTimeout(() => {\n            const { focusElementSelector } = this.props;\n            const focusElementSelectorTrimmed = focusElementSelector && focusElementSelector.trim();\n            if (focusElementSelectorTrimmed) {\n                this.focusElement(focusElementSelectorTrimmed);\n            } else {\n                this.focusFirstUsefulElement();\n            }\n        }, 0);\n    };\n\n    dialog: ?HTMLElement;\n\n    /**\n     * Focus the first useful element in the modal (i.e. not the close button, unless it's the only thing)\n     */\n    focusFirstUsefulElement = () => {\n        if (!this.dialog) {\n            return;\n        }\n        const tabbableEls = tabbable(this.dialog);\n        if (tabbableEls.length > 1) {\n            tabbableEls[1].focus();\n        } else if (tabbableEls.length > 0) {\n            tabbableEls[0].focus();\n        }\n    };\n\n    /**\n     * Focus the element that matches the selector in the modal\n     * @throws {Error} When the elementSelector does not match any element\n     */\n    focusElement = (elementSelector: string) => {\n        if (!this.dialog) {\n            return;\n        }\n        const el = this.dialog.querySelector(elementSelector);\n        if (el) {\n            el.focus();\n        } else {\n            throw new Error(`Could not find element matching selector ${elementSelector} to focus on.`);\n        }\n    };\n\n    render() {\n        const { className, isLoading, isOpen, onRequestClose, shouldNotUsePortal, style, ...rest } = this.props;\n\n        if (!isOpen) {\n            return null;\n        }\n\n        const bodyOverrideStyle = `\n            body {\n                overflow:hidden;\n            }\n        `;\n\n        // used `omit` here to prevent certain key/value pairs from going into the spread on `ModalDialog`\n        const modalProps = omit(rest, ['onBackdropClick', 'focusElementSelector']);\n\n        const WrapperComponent = shouldNotUsePortal ? 'div' : Portal;\n        // Render a style tag to prevent body from scrolling as long as the Modal is open\n        return (\n            <WrapperComponent className={classNames('modal', className)} onKeyDown={this.onKeyDown} tabIndex=\"-1\">\n                {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */}\n                <div className=\"modal-backdrop\" onClick={this.onBackdropClick} style={style.backdrop} />\n                <FocusTrap className=\"modal-dialog-container\">\n                    {isLoading ? (\n                        <LoadingIndicator size=\"large\" />\n                    ) : (\n                        <ModalDialog\n                            modalRef={modalEl => {\n                                // This callback gets passed through as a regular prop since\n                                // ModalDialog is wrapped in a HOC\n                                this.dialog = modalEl;\n                            }}\n                            onRequestClose={onRequestClose}\n                            style={style.dialog}\n                            {...modalProps}\n                        />\n                    )}\n                </FocusTrap>\n                <style type=\"text/css\">{bodyOverrideStyle}</style>\n            </WrapperComponent>\n        );\n    }\n}\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin","// @flow\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n    className?: string,\n};\n\nconst ModalActions = ({ className, ...rest }: Props) => (\n    <div className={classNames('modal-actions', className)} {...rest} />\n);\n\nexport default ModalActions;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport uniqueId from 'lodash/uniqueId';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport IconClose from '../../icon/fill/X16';\n\nconst ALERT_TYPE = 'alert';\nconst DIALOG_TYPE = 'dialog';\n\nconst messages = defineMessages({\n    closeModalText: {\n        defaultMessage: 'Close Modal',\n        description: 'Button to close modal',\n        id: 'boxui.modalDialog.closeModalText',\n    },\n});\n\ntype Props = {\n    children: React.Node,\n    className?: string,\n    closeButtonProps: Object,\n    intl: Object,\n    modalRef?: Function,\n    onRequestClose?: Function,\n    title?: React.Node,\n    type?: 'alert' | 'dialog',\n};\n\nclass ModalDialog extends React.Component<Props> {\n    static defaultProps = {\n        type: DIALOG_TYPE,\n        closeButtonProps: {},\n    };\n\n    /**\n     * Handles clicking on the close button\n     * @param {SyntheticMouseEvent} event\n     * @return {void}\n     */\n    onCloseButtonClick = (event: SyntheticMouseEvent<HTMLButtonElement>) => {\n        const { onRequestClose } = this.props;\n        if (onRequestClose) {\n            onRequestClose(event);\n        }\n    };\n\n    modalID: string = uniqueId('modal');\n\n    /**\n     * Renders a button if onRequestClose is passed in\n     * @return {ReactElement|null} - Returns the button, or null if the button shouldn't be rendered\n     */\n    renderCloseButton() {\n        const { closeButtonProps, onRequestClose, intl } = this.props;\n        const { formatMessage } = intl;\n        if (!onRequestClose) {\n            return null;\n        }\n\n        return (\n            // eslint-disable-next-line react/button-has-type\n            <button\n                {...closeButtonProps}\n                aria-label={formatMessage(messages.closeModalText)}\n                className=\"modal-close-button\"\n                onClick={this.onCloseButtonClick}\n            >\n                <IconClose color=\"#909090\" height={18} width={18} />\n            </button>\n        );\n    }\n\n    renderContent() {\n        const { children, type } = this.props;\n\n        if (type !== ALERT_TYPE) {\n            return <div className=\"modal-content\">{children}</div>;\n        }\n\n        const elements = React.Children.toArray(children);\n        if (elements.length !== 2) {\n            throw new Error('Alert modal must have exactly two children: A message and <ModalActions>');\n        }\n\n        return (\n            <div className=\"modal-content\">\n                <p id={`${this.modalID}-desc`}>{elements[0]}</p>\n                {elements[1]}\n            </div>\n        );\n    }\n\n    render() {\n        const {\n            className,\n            modalRef,\n            title,\n            type,\n            ...rest // Useful for resin tagging, and other misc tags such as a11y\n        } = this.props;\n        const isAlertType = type === ALERT_TYPE;\n        const divProps = omit(rest, ['children', 'closeButtonProps', 'onRequestClose', 'intl']);\n\n        divProps.role = isAlertType ? 'alertdialog' : 'dialog';\n        divProps['aria-labelledby'] = `${this.modalID}-label`;\n        if (isAlertType) {\n            divProps['aria-describedby'] = `${this.modalID}-desc`;\n        }\n\n        return (\n            <div ref={modalRef} className={classNames('modal-dialog', className)} {...divProps}>\n                <div className=\"modal-header-container\">\n                    <div className=\"modal-header\">\n                        <h2 className=\"modal-title\" id={`${this.modalID}-label`}>\n                            {title}\n                        </h2>\n                    </div>\n                    {this.renderCloseButton()}\n                </div>\n                {this.renderContent()}\n            </div>\n        );\n    }\n}\n\nexport { ModalDialog as ModalDialogBase };\nexport default injectIntl(ModalDialog);\n","import * as React from 'react';\nimport { createPortal } from 'react-dom';\n\nexport interface PortalProps {\n    className?: string;\n    container: HTMLElement | null | undefined;\n    style?: { [arg: string]: string | number };\n}\n\nclass Portal extends React.PureComponent<PortalProps> {\n    static defaultProps = {\n        container: document.body,\n    };\n\n    constructor(props: PortalProps) {\n        super(props);\n        this.container = this.props.container;\n        this.layer = document.createElement('div');\n        this.layer.setAttribute('data-portal', '');\n        if (this.container && this.layer) {\n            this.container.appendChild(this.layer);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.container && this.layer) {\n            this.container.removeChild(this.layer);\n        }\n        this.layer = null;\n    }\n\n    layer: HTMLDivElement | null | undefined;\n\n    container: HTMLElement | null | undefined;\n\n    render(): null | React.ReactPortal {\n        const { ...elementProps }: PortalProps = this.props;\n        if (!this.layer) {\n            return null;\n        }\n\n        return createPortal(<div {...elementProps} />, this.layer);\n    }\n}\n\nexport default Portal;\n","export { default } from './Portal';\n","/**\n * @flow\n * @file withErrorHandling higher order component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport ErrorMask from '../../components/error-mask/ErrorMask';\nimport InlineError from '../../components/inline-error/InlineError';\n\nimport SidebarSection from './SidebarSection';\n\nimport type { Errors } from './flowTypes';\n\ntype Props = {\n    errorCode?: string,\n} & Errors;\n\nconst withErrorHandling = (WrappedComponent: React.ComponentType<any>) => ({\n    maskError,\n    inlineError,\n    errorCode,\n    ...rest\n}: Props) => {\n    if (maskError) {\n        return (\n            <SidebarSection>\n                <ErrorMask\n                    errorHeader={<FormattedMessage {...maskError.errorHeader} />}\n                    errorSubHeader={\n                        maskError.errorSubHeader ? <FormattedMessage {...maskError.errorSubHeader} /> : undefined\n                    }\n                />\n            </SidebarSection>\n        );\n    }\n    if (inlineError) {\n        return (\n            <>\n                <InlineError title={<FormattedMessage {...inlineError.title} />}>\n                    <FormattedMessage {...inlineError.content} />\n                </InlineError>\n                <WrappedComponent {...rest} />\n            </>\n        );\n    }\n\n    return <WrappedComponent {...rest} />;\n};\n\nexport default withErrorHandling;\n"],"sourceRoot":""}